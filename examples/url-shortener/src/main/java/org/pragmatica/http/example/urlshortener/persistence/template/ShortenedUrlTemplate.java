package org.pragmatica.http.example.urlshortener.persistence.template;

import org.pragmatica.http.example.urlshortener.domain.entity.ShortenedUrl;
import org.pragmatica.lang.Functions.Fn1;
import org.pragmatica.lang.Result;
import org.pragmatica.lang.Tuple.Tuple3;
import org.pragmatica.lang.type.FieldNames;
import org.pragmatica.lang.type.KeyToValue;
import org.pragmatica.lang.type.RecordTemplate;
import org.pragmatica.lang.type.TypeToken;

import java.time.LocalDateTime;
import java.util.List;

import static org.pragmatica.lang.Tuple.tuple;

// Will be generated by annotation processor eventually (TODO)
public interface ShortenedUrlTemplate extends RecordTemplate<ShortenedUrl> {
    ShortenedUrlTemplate INSTANCE = new ShortenedUrlTemplate() {};

    static ShortenedUrlBuilder builder() {
        return id -> srcUrl -> created -> lastAccessed -> new ShortenedUrl(id, srcUrl, created, lastAccessed);
    }

    interface ShortenedUrlBuilder {
        SrcUrl id(String id);

        interface SrcUrl {
            Created srcUrl(String srcUrl);
        }

        interface Created {
            LastAccessed created(LocalDateTime created);
        }

        interface LastAccessed {
            ShortenedUrl lastAccessed(LocalDateTime lastAccessed);
        }
    }

    @Override
    default Result<ShortenedUrl> load(String prefix, KeyToValue mapping) {
        return Result.all(
                         mapping.get(prefix, "id", new TypeToken<String>() {}),
                         mapping.get(prefix, "srcUrl", new TypeToken<String>() {}),
                         mapping.get(prefix, "created", new TypeToken<LocalDateTime>() {}),
                         mapping.get(prefix, "lastAccessed", new TypeToken<LocalDateTime>() {}))
                     .map(ShortenedUrl::new);
    }


    @Override
    default FieldNames fieldNames() {
        return () -> FORMATTED_NAMES;
    }

    @Override
    default List<Tuple3<String, TypeToken<?>, Fn1<?, ShortenedUrl>>> extractors() {
        return VALUE_EXTRACTORS;
    }

    List<Tuple3<String, TypeToken<?>, Fn1<?, ShortenedUrl>>> VALUE_EXTRACTORS = List.of(
        tuple("id", new TypeToken<String>() {}, ShortenedUrl::id),
        tuple("srcUrl", new TypeToken<String>() {}, ShortenedUrl::srcUrl),
        tuple("created", new TypeToken<LocalDateTime>() {}, ShortenedUrl::created),
        tuple("lastAccessed", new TypeToken<LocalDateTime>() {}, ShortenedUrl::lastAccessed)
    );

    String FORMATTED_NAMES = RecordTemplate.buildFormattedNames(VALUE_EXTRACTORS);
}
