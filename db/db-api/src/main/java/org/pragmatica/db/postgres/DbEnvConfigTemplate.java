package org.pragmatica.db.postgres;

import org.pragmatica.lang.Functions.Fn1;
import org.pragmatica.lang.Option;
import org.pragmatica.lang.Result;
import org.pragmatica.lang.Tuple.Tuple2;
import org.pragmatica.lang.Tuple.Tuple3;
import org.pragmatica.lang.type.KeyToValue;
import org.pragmatica.lang.type.RecordTemplate;
import org.pragmatica.lang.type.TypeToken;
import org.pragmatica.uri.IRI;

import java.util.List;
import java.util.stream.Stream;

import static org.pragmatica.lang.Tuple.tuple;

//TODO: eventually it should be generated by annotation processor
public interface DbEnvConfigTemplate extends RecordTemplate<DbEnvConfig> {
    static DbEnvConfigBuilder builder() {
        return url ->
            username ->
                password ->
                    maxConnections ->
                        maxStatements ->
                            useSsl ->
                                validationQuery ->
                                    encoding ->
                                        () -> new DbEnvConfig(url,
                                                              username,
                                                              password,
                                                              maxConnections,
                                                              maxStatements,
                                                              useSsl,
                                                              validationQuery,
                                                              encoding);
    }

    interface DbEnvConfigBuilder {
        Username url(IRI url);

        interface Username {
            Password username(String username);
        }

        interface Password {
            MaxConnections password(String password);
        }

        interface MaxConnections {
            MaxStatements maxConnections(int maxConnections);
        }

        interface MaxStatements {
            UseSsl maxStatements(int maxStatements);
        }

        interface UseSsl {
            ValidationQuery useSsl(boolean useSsl);
        }

        interface ValidationQuery {
            Encoding validationQuery(Option<String> validationQuery);
        }

        interface Encoding {
            Build encoding(Option<String> encoding);
        }

        interface Build {
            DbEnvConfig build();
        }
    }

    @Override
    default Result<DbEnvConfig> load(KeyToValue mapping) {
        return Result.all(mapping.get("url", new TypeToken<IRI>() {}),
                          mapping.get("username", new TypeToken<String>() {}),
                          mapping.get("password", new TypeToken<String>() {}),
                          mapping.get("maxConnections", new TypeToken<Integer>() {}),
                          mapping.get("maxStatements", new TypeToken<Integer>() {}),
                          mapping.get("useSsl", new TypeToken<Boolean>() {}),
                          mapping.get("validationQuery", new TypeToken<Option<String>>() {}),
                          mapping.get("encoding", new TypeToken<Option<String>>() {}))
                     .map(DbEnvConfig::new);
    }

    @Override
    default Stream<Tuple2<String, TypeToken<?>>> fieldDescriptors() {
        return FIELDS.stream();
    }

    @Override
    default Stream<Tuple3<String, TypeToken<?>, ?>> valueDescriptors(DbEnvConfig record) {
        return VALUE_EXTRACTORS.stream()
                               .map(tuple -> tuple.map((name, type, fn) -> tuple(name, type, fn.apply(record))));
    }

    List<Tuple2<String, TypeToken<?>>> FIELDS = List.of(
        tuple("url", new TypeToken<IRI>() {}),
        tuple("username", new TypeToken<String>() {}),
        tuple("password", new TypeToken<String>() {}),
        tuple("maxConnections", new TypeToken<Integer>() {}),
        tuple("maxStatements", new TypeToken<Integer>() {}),
        tuple("useSsl", new TypeToken<Boolean>() {}),
        tuple("validationQuery", new TypeToken<Option<String>>() {}),
        tuple("encoding", new TypeToken<Option<String>>() {})
    );

    List<Tuple3<String, TypeToken<?>, Fn1<?, DbEnvConfig>>> VALUE_EXTRACTORS = List.of(
        tuple("url", new TypeToken<IRI>() {}, DbEnvConfig::url),
        tuple("username", new TypeToken<String>() {}, DbEnvConfig::username),
        tuple("password", new TypeToken<String>() {}, DbEnvConfig::password),
        tuple("maxConnections", new TypeToken<Integer>() {}, DbEnvConfig::maxConnections),
        tuple("maxStatements", new TypeToken<Integer>() {}, DbEnvConfig::maxStatements),
        tuple("useSsl", new TypeToken<Boolean>() {}, DbEnvConfig::useSsl),
        tuple("validationQuery", new TypeToken<Option<String>>() {}, DbEnvConfig::validationQuery),
        tuple("encoding", new TypeToken<Option<String>>() {}, DbEnvConfig::encoding)
    );
}
